name: Development
on:
  pull_request:
    branches:
      - "dev"
    paths:
      - "development/**"
  push:
    branches:
      - "dev"
    paths:
      - "development/**"
env:
  ENV: dev
  BASE_DIR: development
  AWS_DEFAULT_REGION: us-east-1
  AWS_IAM_ASSUME_ROLE: "arn:aws:iam::350828950339:role/gwt-acuity-infra-oidc-role"
  AWS_IAM_EXEC_ROLE: "arn:aws:iam::918623739618:role/gwt-acuity-infra-execution-role"
  GITHUB_OAUTH_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TF_INPUT: false
  TERRAGRUNT_SOURCE_UPDATE: true
  DATABRICKS_USERNAME: ${{ secrets.DATABRICKS_USERNAME }}
  DATABRICKS_PASSWORD: ${{ secrets.DATABRICKS_PASSWORD }}

permissions:
  id-token: write
  contents: read
  pull-requests: write

concurrency: development

jobs:
  infra:
    name: Core-Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3.1.0

      - name: setup
        uses: ./.github/actions/setup
        with:
          ssh_private_key: ${{ secrets.PRIVATE_SSH_KEY }}

      - name: Configure-AWS-Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{env.AWS_DEFAULT_REGION}}
          role-to-assume: ${{env.AWS_IAM_ASSUME_ROLE}}
          role-duration-seconds: 3600
          role-session-name: gh-actions

      - name: Secrets-To-Environemnt
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: |
            github/workflows/datadog
          parse-json: true

      - name: Account-Baseline
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/account/baseline

      - name: Datadog-Integration
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/monitoring
        env:
          DD_API_KEY: ${{env.GITHUB_WORKFLOWS_DATADOG_API_KEY}}
          DD_APP_KEY: ${{env.GITHUB_WORKFLOWS_DATADOG_APP_KEY}}
          DD_HOST: https://api.datadoghq.com/
          TF_VAR_datadog_api_key: ${{env.GITHUB_WORKFLOWS_DATADOG_API_KEY}}

      - name: Deploy-SSMDocuments
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/account/ssm-documents

      - name: Visualization-Network
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/network/visualization

      - name: Data-Network
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/network/data

      - name: Postgres-Datastore
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/datastore/rds/abc

      - name: Public-DNS
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/dns/public

      - name: Application-Loadbalancer
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/loadbalancers/alb

  databricks:
    name: Databricks-Platform
    runs-on: ubuntu-latest
    needs: infra
    steps:
      - name: checkout
        uses: actions/checkout@v3.1.0

      - name: setup
        uses: ./.github/actions/setup
        with:
          ssh_private_key: ${{ secrets.PRIVATE_SSH_KEY }}

      - name: Configure-AWS-Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{env.AWS_DEFAULT_REGION}}
          role-to-assume: ${{env.AWS_IAM_ASSUME_ROLE}}
          role-duration-seconds: 1200
          role-session-name: gh-actions

      - name: Databricks-Network
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/apps/databricks/network

      - name: Databricks-Credentials
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/apps/databricks/credentials

      - name: Reference-Data-Store
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/apps/databricks/refdata

      - name: Databricks-ABC
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/apps/databricks/abc

  tableau:
    name: Tableau-Servers
    runs-on: ubuntu-latest
    needs: infra
    steps:
      - name: checkout
        uses: actions/checkout@v3.1.0

      - name: setup
        uses: ./.github/actions/setup
        with:
          ssh_private_key: ${{ secrets.PRIVATE_SSH_KEY }}

      - name: Configure-AWS-Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{env.AWS_DEFAULT_REGION}}
          role-to-assume: ${{env.AWS_IAM_ASSUME_ROLE}}
          role-duration-seconds: 1200
          role-session-name: gh-actions

      - name: Get-Okta-Credentials
        uses: bitovi/github-actions-aws-secrets-manager@v2.0.0
        with:
          secrets: |
            github/workflows/okta/dev
          parse-json: true

      - name: Tableau-Deployment
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/apps/tableau
        env:
          OKTA_API_TOKEN: ${{ env.GITHUB_WORKFLOWS_OKTA_DEV_API_TOKEN }}
          OKTA_BASE_URL: ${{ env.GITHUB_WORKFLOWS_OKTA_DEV_BASE_URL }}

  datadog:
    name: Install-DataDog
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: tableau
    env:
      ANSIBLE_PYTHON_INTERPRETER: auto_silent
      ANSIBLE_FORCE_COLOR: "1"
    steps:
      - name: checkout
        uses: actions/checkout@v3.1.0

      - name: Install-Ansible
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel
          python -m pip install ansible
          python -m pip install boto3 botocore
        shell: bash

      - name: Configure-OIDC-Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{env.AWS_DEFAULT_REGION}}
          role-to-assume: ${{env.AWS_IAM_ASSUME_ROLE}}
          role-duration-seconds: 3600
          role-session-name: ansible-oidc-session

      - name: Secrets-To-Environemnt
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: |
            github/workflows/datadog
          parse-json: true
        # This action should export Datadog Secerts with the following
        # Variable names
        #GITHUB_WORKFLOWS_DATADOG_API_KEY
        #GITHUB_WORKFLOWS_DATADOG_APP_KEY
        #GITHUB_WORKFLOWS_DATADOG_HOST

      - name: Configure-AWS-Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{env.AWS_DEFAULT_REGION}}
          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
          aws-session-token: ${{env.AWS_SESSION_TOKEN}}
          role-to-assume: ${{env.AWS_IAM_EXEC_ROLE}}
          role-duration-seconds: 3600
          role-session-name: ansible-session

      - name: Prepare-Ansible-Run
        run: |
          ${BASE_DIR}/apps/tableau/datadog_agent.sh
        shell: bash

      - name: Install-Datadog-Ansible-Collection
        run: |
          ansible-galaxy install datadog.datadog
        shell: bash

      - name: Run-Ansible-Playbook
        run: |
          ansible-playbook -i /tmp/inventory ${BASE_DIR}/apps/tableau/playbook.yaml \
            --extra-vars "nodes=all api_key=${GITHUB_WORKFLOWS_DATADOG_API_KEY} dd_agent_env=${ENV}"
        shell: bash

  missouri:
    name: Tenant-Missouri
    runs-on: ubuntu-latest
    needs: databricks
    steps:
      - name: checkout
        uses: actions/checkout@v3.1.0

      - name: setup
        uses: ./.github/actions/setup
        with:
          ssh_private_key: ${{ secrets.PRIVATE_SSH_KEY }}

      - name: Configure-AWS-Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{env.AWS_DEFAULT_REGION}}
          role-to-assume: ${{env.AWS_IAM_ASSUME_ROLE}}
          role-duration-seconds: 1200
          role-session-name: gh-actions

      - name: Secrets-To-Environemnt
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: |
            github/workflows/datadog
          parse-json: true

      - name: Databricks-Datalake
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/tenants/missouri/databricks/datalake

      - name: Databricks-Workspace
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/tenants/missouri/databricks/workspace

      - name: Databricks-Default-Cluster
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/tenants/missouri/databricks/cluster
        continue-on-error: true
        env:
          TF_VAR_dd_api_key: ${GITHUB_WORKFLOWS_DATADOG_API_KEY}

  oz:
    name: Tenant-Oz
    runs-on: ubuntu-latest
    needs: databricks
    steps:
      - name: checkout
        uses: actions/checkout@v3.1.0

      - name: setup
        uses: ./.github/actions/setup
        with:
          ssh_private_key: ${{ secrets.PRIVATE_SSH_KEY }}

      - name: Configure-AWS-Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{env.AWS_DEFAULT_REGION}}
          role-to-assume: ${{env.AWS_IAM_ASSUME_ROLE}}
          role-duration-seconds: 1200
          role-session-name: gh-actions

      - name: Secrets-To-Environemnt
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: |
            github/workflows/datadog
          parse-json: true

      - name: Databricks-Datalake
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/tenants/landofoz/databricks/datalake

      - name: Databricks-Workspace
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/tenants/landofoz/databricks/workspace

      - name: Databricks-Default-Cluster
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/tenants/landofoz/databricks/cluster
        continue-on-error: true
        env:
          TF_VAR_dd_api_key: ${GITHUB_WORKFLOWS_DATADOG_API_KEY}

      - name: Databricks-Unity-Catalog
        uses: ./.github/actions/run-terragrunt
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working_dir: $BASE_DIR/tenants/landofoz/databricks/unity-catalog
        continue-on-error: true
